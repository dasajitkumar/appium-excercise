{"status": "failed", "uuid": "545ee458-b5dc-4647-a2c5-58a09e7538a8", "labels": [{"name": "host", "value": "DESKTOP-NKTDNT4"}, {"name": "thread", "value": "9592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "test_suites.purchase_flow.test_purchase_flow"}], "stop": 1525699521922, "historyId": "af5c30ce6bee2894eb34c3fdec862640", "start": 1525699519836, "fullName": "test_suites.purchase_flow.test_purchase_flow.TestPurchaseFlow#test_purchase", "statusDetails": {"message": "URLError: <urlopen error [Errno 10061] No connection could be made because the target machine actively refused it>", "trace": "self = <test_suites.purchase_flow.test_purchase_flow.TestPurchaseFlow testMethod=test_purchase>\n\n    def setUp(self):\n>       user_login = UserLogin()\n\ntest_purchase_flow.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\ebay\\mobileui\\login\\action\\login_page.py:20: in __init__\n    self.base_page = BasePage()\n..\\..\\ebay\\mobileui\\utils\\base_page.py:19: in __init__\n    remote_inst = RemoteInit()\n..\\..\\ebay\\mobileui\\utils\\driver_init.py:23: in __init__\n    self.driver = webdriver.Remote(base_url, server_data['desire_capabilities'])\nC:\\Python27\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:154: in __init__\n    self.start_session(desired_capabilities, browser_profile)\nC:\\Python27\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:243: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nC:\\Python27\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:309: in execute\n    response = self.command_executor.execute(driver_command, params)\nC:\\Python27\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:460: in execute\n    return self._request(command_info[0], url, body=data)\nC:\\Python27\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:522: in _request\n    resp = opener.open(request, timeout=self._timeout)\nC:\\Python27\\lib\\urllib2.py:429: in open\n    response = self._open(req, data)\nC:\\Python27\\lib\\urllib2.py:447: in _open\n    '_open', req)\nC:\\Python27\\lib\\urllib2.py:407: in _call_chain\n    result = func(*args)\nC:\\Python27\\lib\\urllib2.py:1228: in http_open\n    return self.do_open(httplib.HTTPConnection, req)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib2.HTTPHandler instance at 0x036BC3C8>\nhttp_class = <class httplib.HTTPConnection at 0x0353D260>\nreq = <selenium.webdriver.remote.remote_connection.Request instance at 0x03691DC8>\nhttp_conn_args = {}, host = '127.0.0.1:4723'\nh = <httplib.HTTPConnection instance at 0x036BC508>\nerr = error(10061, 'No connection could be made because the target machine actively refused it')\n\n    def do_open(self, http_class, req, **http_conn_args):\n        \"\"\"Return an addinfourl object for the request, using http_class.\n    \n            http_class must implement the HTTPConnection API from httplib.\n            The addinfourl return value is a file-like object.  It also\n            has methods and attributes including:\n                - info(): return a mimetools.Message object for the headers\n                - geturl(): return the original request URL\n                - code: HTTP status code\n            \"\"\"\n        host = req.get_host()\n        if not host:\n            raise URLError('no host given')\n    \n        # will parse host:port\n        h = http_class(host, timeout=req.timeout, **http_conn_args)\n        h.set_debuglevel(self._debuglevel)\n    \n        headers = dict(req.unredirected_hdrs)\n        headers.update(dict((k, v) for k, v in req.headers.items()\n                            if k not in headers))\n    \n        # We want to make an HTTP/1.1 request, but the addinfourl\n        # class isn't prepared to deal with a persistent connection.\n        # It will try to read all remaining data from the socket,\n        # which will block while the server waits for the next request.\n        # So make sure the connection gets closed after the (only)\n        # request.\n        headers[\"Connection\"] = \"close\"\n        headers = dict(\n            (name.title(), val) for name, val in headers.items())\n    \n        if req._tunnel_host:\n            tunnel_headers = {}\n            proxy_auth_hdr = \"Proxy-Authorization\"\n            if proxy_auth_hdr in headers:\n                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]\n                # Proxy-Authorization should not be sent to origin\n                # server.\n                del headers[proxy_auth_hdr]\n            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)\n    \n        try:\n            h.request(req.get_method(), req.get_selector(), req.data, headers)\n        except socket.error, err: # XXX what error?\n            h.close()\n>           raise URLError(err)\nE           URLError: <urlopen error [Errno 10061] No connection could be made because the target machine actively refused it>\n\nC:\\Python27\\lib\\urllib2.py:1198: URLError"}, "name": "test_purchase"}